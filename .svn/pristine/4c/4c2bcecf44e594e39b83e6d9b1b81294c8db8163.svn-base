package com.java1234.controller.weixin;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.ContextLoader;
import org.springframework.web.context.WebApplicationContext;
import com.java1234.entity.Client;
import com.java1234.entity.Config;
import com.java1234.entity.FenLei;
import com.java1234.http.HttpClient;
import com.java1234.service.ClientService;
import com.java1234.util.Base64Test;
import com.java1234.util.DateUtil;
import com.java1234.util.FileUtil;
import com.java1234.util.ResponseUtil;
import com.java1234.util.StringUtil;
import com.java1234.util.weixin.WeiXinUtil;

import net.sf.json.JSONObject;


@Controller
@RequestMapping("/weixin/messages")
public class WeiXinMessagesController {
	
	@Resource
	private ClientService clientService;
	
	
	/**
	 * 模板消息接口
	 * @param url：/weixin/messages/template
	 * @param template_id
	 * @param first
	 * @param keyword1
	 * @param keyword2
	 * @param keyword3
	 * @param keyword4
	 * @param remark
	 * @param clientIds：选择的客户id
	 */
	@RequestMapping("/template")
	public String template(@RequestParam(value = "url", required = false) String url,
			@RequestParam(value = "template_id", required = false) String template_id,
			@RequestParam(value = "first", required = false) String first,
			@RequestParam(value = "keyword1", required = false) String keyword1,
			@RequestParam(value = "keyword2", required = false) String keyword2,
			@RequestParam(value = "keyword3", required = false) String keyword3,
			@RequestParam(value = "keyword4", required = false) String keyword4,
			@RequestParam(value = "remark", required = false) String remark,
			@RequestParam(value = "clientIds", required = false) String clientIds,
			HttpServletResponse response,
			HttpServletRequest request) throws Exception {

		String[] idsArray = clientIds.split(",");
		Map<String, Object> map = new HashMap<String, Object>();
		
		
		WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();
		ServletContext servletContext = webApplicationContext.getServletContext();
		JSONObject token = (JSONObject) servletContext.getAttribute("token");
		
		
		List<JSONObject> sendList = new ArrayList<JSONObject>();
		
		if (StringUtil.isNotEmpty(url)) {
			map.put("url", url);
		}
		if (StringUtil.isNotEmpty(template_id)) {
			map.put("template_id", template_id);
		}
		if (StringUtil.isNotEmpty(first)) {
			map.put("first", first);
		}
		if (StringUtil.isNotEmpty(keyword1)) {
			map.put("keyword1", keyword1);
		}
		if (StringUtil.isNotEmpty(keyword2)) {
			map.put("keyword2", keyword2);
		}
		if (StringUtil.isNotEmpty(keyword3)) {
			map.put("keyword3", keyword3);
		}
		if (StringUtil.isNotEmpty(keyword4)) {
			map.put("keyword4", keyword4);
		}
		if (StringUtil.isNotEmpty(remark)) {
			map.put("remark", remark);
		}
		
		String post_url = "https://api.weixin.qq.com/cgi-bin/message/template/send?access_token="+token.getString("access_token");
		
		Client client;
		JSONObject data ; 
		for (int i = 0; i < idsArray.length; i++) {
			client = clientService.findById(Integer.parseInt(idsArray[i]));
			map.put("openid", client.getOpenid());
			data = new JSONObject();
			data.put("post_url", post_url);
			data.put("data", WeiXinUtil.get_template_messages_data(map));
			sendList.add(data);
		}
		
		WeiXinUtil.start_thread_push_Template_Messages(sendList);
		data = new JSONObject();
		data.put("success", true);
		data.put("msg", "发送成功");
		
		ResponseUtil.write(response, data.toString());
		
		return null;
	}
	
	
	/**
	 * 纯文本  消息接口
	 * @param url：/weixin/messages/text
	 * @param content
	 * @param clientIds
	 */
	@RequestMapping("/text")
	public String text(
			@RequestParam(value = "content", required = false) String content,
			@RequestParam(value = "clientIds", required = false) String clientIds,
			HttpServletResponse response,
			HttpServletRequest request) throws Exception {
		
		String[] idsArray = clientIds.split(",");
		
		WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();
		ServletContext servletContext = webApplicationContext.getServletContext();
		JSONObject token = (JSONObject) servletContext.getAttribute("token");
		
		String post_url = "https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token="+token.getString("access_token");
		
		Client client;
		JSONObject data ; 
		String result ; 
		int ok_count = 0 ; 
		int fail_count = 0;
		
		for (int i = 0; i < idsArray.length; i++) {
			client = clientService.findById(Integer.parseInt(idsArray[i]));
			result = HttpClient.post(post_url, WeiXinUtil.getText(client.getOpenid(), content));
			System.out.println(result);
			if(result.indexOf("ok")!=-1){
				ok_count++;
			}else{
				fail_count++;
			}
		}
		
		data = new JSONObject();
		data.put("success", true);
		data.put("msg", "成功:"+ok_count+"___失败:"+fail_count);
		ResponseUtil.write(response, data.toString());
		return null;
	}
	
	
	/**
	 * 
	 * 客服消息  消息接口
	 * @param url：/weixin/messages/client
	 * @param clientIds  用户的id
	 * @param msgtype image图文   voice语音    video视频     music音乐    mpnews文章消息 图文     wxcard 发送卡券
	 * 
	 */
	@RequestMapping("/client")
	public String client(
			@RequestParam(value = "media_id", required = false) String media_id,
			@RequestParam(value = "clientIds", required = false) String clientIds,
			@RequestParam(value = "msgtype", required = false) String msgtype,
			HttpServletResponse response,
			HttpServletRequest request) throws Exception {
		
		WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();
		ServletContext servletContext = webApplicationContext.getServletContext();
		JSONObject token = (JSONObject) servletContext.getAttribute("token");
		
		String post_url = "https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token="+token.getString("access_token");
		//openid  msgtype  text 组成消息  返回过来 
		
		int success = 0;
		int fail = 0 ; 
		
		String[] idsArray = clientIds.split(",");
		
		Client client = null;
		String resultJson = null;
		JSONObject data = new JSONObject();
		JSONObject data_media = new JSONObject();
		data_media.put("media_id", media_id);
		
		for (int i = 0; i < idsArray.length; i++) {
			client = clientService.findById(Integer.parseInt(idsArray[i]));
			resultJson = WeiXinUtil.set_client_message(media_id, client.getOpenid(), post_url, msgtype);
			//System.out.println(resultJson);
			if(resultJson.indexOf("ok")!=-1){
				success ++;
			}else{
				fail++;
			}
		}
		JSONObject result = new JSONObject();
		result.put("success", true);
		result.put("msg", "成功:"+success+"___失败:"+fail);
		//System.out.println(result.toString());
		ResponseUtil.write(response, result.toString());
		
		return null;
	}
	
	
	
	/**
	 * 自定义图文消息  消息接口
	 * @param url：/weixin/messages/custom/news
	 * @param clientIds
	 */
	@RequestMapping("/custom/news")
	public String custom_news(
			@RequestParam(value = "title", required = false) String title,
			@RequestParam(value = "desc", required = false) String desc,
			@RequestParam(value = "url", required = false) String url,
			@RequestParam(value = "imgData", required = false) String imgData,
			@RequestParam(value = "clientIds", required = false) String clientIds,
			HttpServletResponse response,
			HttpServletRequest request) throws Exception {
		
		
		
		WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();
		ServletContext servletContext = webApplicationContext.getServletContext();
		JSONObject token = (JSONObject) servletContext.getAttribute("token");
		
		Config config = (Config) servletContext.getAttribute("config");
		
		String post_url = "https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token="+token.getString("access_token");
		//openid  msgtype  text 组成消息  返回过来 
		
		String img_url =config.getWeb_site()+ this.updateImgDataBase64(imgData, request,"/static/images/temp");
		
		
		int success = 0;
		int fail = 0 ; 
		
		String[] idsArray = clientIds.split(",");
		
		Client client = null;
		String post_data = null;
		String resultJson = null;
		for (int i = 0; i < idsArray.length; i++) {
			client = clientService.findById(Integer.parseInt(idsArray[i]));
			
			post_data= WeiXinUtil.getCustomNews(client.getOpenid(),title,desc,img_url,url);
			
			resultJson = HttpClient.post(post_url, post_data);
			//System.out.println(resultJson);
			if(resultJson.indexOf("ok")!=-1){
				success ++;
			}else{
				fail++;
			}
			
		}
		JSONObject result = new JSONObject();
		result.put("success", true);
		result.put("msg", "成功:"+success+"___失败:"+fail);
		//System.out.println(result.toString());
		ResponseUtil.write(response, result.toString());
		
		return null;
	}
	
	
	/**
	 * 
	 * @param imgData
	 * @param request
	 * @param folder  文件夹带/static/iamge
	 */
	public  String   updateImgDataBase64(String imgData,HttpServletRequest request,String folder ){
		//取得根目录带d://dxxxxx/tomcat/ruzhou/
		String webPath=request.getServletContext().getRealPath("");
		String fileName = DateUtil.formatDate(new Date(), "yyyyMMddHHmmss")+".jpg";
		//调用产生文件夹的方法
		FileUtil.makeDirs(webPath+folder);
		imgData = imgData.replace("data:image/png;base64,", "");
		Base64Test.GenerateImage(imgData, webPath+folder+fileName);
		return folder+fileName;
	}
	
	
	
	
	
}
