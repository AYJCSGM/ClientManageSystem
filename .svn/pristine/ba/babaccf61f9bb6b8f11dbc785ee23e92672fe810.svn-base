package com.java1234.controller.weixin;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.java1234.entity.FenLei;
import com.java1234.entity.PageBean;
import com.java1234.entity.Result;
import com.java1234.entity.weixin.ClickEvent;
import com.java1234.entity.weixin.TextEvent;
import com.java1234.service.weixin.ClickEventService;
import com.java1234.service.weixin.TextEventService;
import com.java1234.util.Base64Test;
import com.java1234.util.DateUtil;
import com.java1234.util.FileUtil;
import com.java1234.util.ResponseUtil;
import com.java1234.util.StringUtil;


@Controller
@RequestMapping("/admin/textEvent")
public class AdminTextEventController {
	
	@Resource
	private TextEventService textEventService;
	
	@RequestMapping("/add")
	public String add(TextEvent textEvent ,@RequestParam(value = "imgData", required = false) String imgData, HttpServletResponse response, HttpServletRequest request) throws Exception {
		if(StringUtil.isNotEmpty(imgData)){
			this.updateImgDataBase64(imgData, textEvent, request);
		}
		int resultTotal = textEventService.add(textEvent);
		Result result = new Result();
		Gson gson = new Gson();
		if (resultTotal > 0) {
			result.setSuccess(true);
			result.setMsg("添加成功");
		} else {
			result.setSuccess(false);
			result.setMsg("添加失败!!!!!!!");
		}
		ResponseUtil.write(response, gson.toJson(result));
		return null;
	}
	
	
	/**
	 * 已处理 缩略图 删除问题
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/update")
	public String update(TextEvent textEvent  ,@RequestParam(value = "imgData", required = false) String imgData, HttpServletResponse response, HttpServletRequest request) throws Exception {
		
		String webPath = request.getServletContext().getRealPath("");
		// 判断imgData是否为空，然后转为img 转存服务器
		if (StringUtil.isNotEmpty(imgData)) {
			// 删除之前的 缩略图
			TextEvent temp = textEventService.findById(textEvent.getId());
			if (StringUtil.isNotEmpty(temp.getThumbnail())) {
				FileUtil.deleteFile(webPath + temp.getThumbnail());
			}
			// 上传现在的图片
			this.updateImgDataBase64(imgData, textEvent, request);
		}
		
		
		
		int resultTotal = textEventService.update(textEvent);
		Result result = new Result();
		Gson gson = new Gson();
		if (resultTotal > 0) {
			result.setSuccess(true);
			result.setMsg("修改成功");
		} else {
			result.setSuccess(false);
			result.setMsg("修改失败!!!!!!!");
		}
		ResponseUtil.write(response, gson.toJson(result));
		return null;
	}
	
	
	@RequestMapping("/list")
	public String list(@RequestParam(value = "page", required = false) String page,
			@RequestParam(value = "limit", required = false) String rows,
			@RequestParam(value = "q", required = false) String q,
			@RequestParam(value = "messageType", required = false) String messageType,
			HttpServletResponse response, HttpServletRequest request) throws Exception {
		PageBean pageBean = new PageBean(Integer.parseInt(page), Integer.parseInt(rows));
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("start", pageBean.getStart());
		map.put("size", pageBean.getPageSize());
		map.put("q", StringUtil.formatLike(q));
		map.put("messageType", messageType);
		List<TextEvent> list = textEventService.list(map);
		Integer total = textEventService.getTotal(map);
		Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm").create();
		map.clear();
		map.put("data", list);
		map.put("count", total);
		map.put("code", 0);
		map.put("msg", "");
		
		ResponseUtil.write(response, gson.toJson(map));
		return null;
	}
	
	 
	@RequestMapping("/delete")
	public String delete(@RequestParam(value = "ids", required = false) String ids, HttpServletResponse response,HttpServletRequest request)
			throws Exception {
		String[] idsStr = ids.split(",");
		Gson gson = new Gson();
		Result result = new Result();
		
		TextEvent temp_text_event = null ; 
		
		for (int i = 0; i < idsStr.length; i++) {
			temp_text_event = textEventService.findById(Integer.parseInt(idsStr[i]));
			if(StringUtil.isNotEmpty(temp_text_event.getThumbnail())){
				String webPath=request.getServletContext().getRealPath("/");
				FileUtil.deleteFile(webPath+temp_text_event.getThumbnail());
			}
			
			
			textEventService.delete(Integer.parseInt(idsStr[i]));
		}
		result.setSuccess(true);
		ResponseUtil.write(response, gson.toJson(result));
		return null;
	}
	
	
	
	
	private  void   updateImgDataBase64(String imgData,TextEvent textEvent   ,HttpServletRequest request ){
		//取得根目录带d://dxxxxx/tomcat/ruzhou/
		String webPath=request.getServletContext().getRealPath("/");
		//定义根目录下面的文件夹
		String  updateFile = "static/images/text_event_img/";
		String fileName = DateUtil.formatDate(new Date(), "yyyyMMddHHmmss")+".jpg";
		//调用产生文件夹的方法
		FileUtil.makeDirs(webPath+updateFile);
		imgData = imgData.replace("data:image/png;base64,", "");
		Base64Test.GenerateImage(imgData, webPath+updateFile+fileName);
		textEvent.setThumbnail("/"+updateFile+fileName);
	}
	
	
	
	
	
}
