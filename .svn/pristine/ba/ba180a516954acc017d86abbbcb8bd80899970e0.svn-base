package com.java1234.controller.admin;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.ContextLoader;
import org.springframework.web.context.WebApplicationContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.java1234.entity.Config;
import com.java1234.entity.Link;
import com.java1234.entity.PageBean;
import com.java1234.entity.Result;
import com.java1234.service.LinkService;
import com.java1234.util.Base64Test;
import com.java1234.util.DateUtil;
import com.java1234.util.FileUtil;
import com.java1234.util.ResponseUtil;
import com.java1234.util.StringUtil;

@Controller
@RequestMapping("/admin/link")
public class Admin_Link_Controller {

	@Resource
	private LinkService linkService;

	@RequestMapping("/add")
	public String add(Link link, @RequestParam(value = "imgData", required = false) String imgData,
			HttpServletResponse response, HttpServletRequest request) throws Exception {
		link.setCreateDateTime(new Date());
		link.setUpdateDateTime(new Date());

		// 判断imgData是否为空，然后转为img 转存服务器
		if (StringUtil.isNotEmpty(imgData)) {
			this.updateImgDataBase64(imgData, link, request);
		}
		int resultTotal = linkService.add(link);
		
		//从缓存中取出config
		WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();  
        ServletContext servletContext = webApplicationContext.getServletContext(); 
        Config config = (Config)  servletContext.getAttribute("config");
        String webPath = request.getServletContext().getRealPath("/");
        
		link.setUrl(config.getWeb_site()+"/wap/link/"+link.getId());
		linkService.update(link, webPath);
		
		
		Result result = new Result();
		Gson gson = new Gson();
		if (resultTotal > 0) {
			result.setSuccess(true);
			result.setMsg("添加成功");
		} else {
			result.setSuccess(false);
			result.setMsg("添加失败");
		}
		ResponseUtil.write(response, gson.toJson(result));
		return null;
	}

	@RequestMapping("/update")
	public String update(Link link, @RequestParam(value = "imgData", required = false) String imgData,
			HttpServletResponse response, HttpServletRequest request) throws Exception {
		link.setUpdateDateTime(new Date());
		String webPath = request.getServletContext().getRealPath("/");
		
		//从缓存中取出config
		WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();  
        ServletContext servletContext = webApplicationContext.getServletContext(); 
        Config config = (Config)  servletContext.getAttribute("config");
		link.setUrl(config.getWeb_site()+"/wap/link/"+link.getId());
		
		// 判断imgData是否为空，然后转为img 转存服务器
		if (StringUtil.isNotEmpty(imgData)) {
			// 删除之前的 缩略图
			Link temp = linkService.findById(link.getId());
			if (StringUtil.isNotEmpty(temp.getImg_url())) {
				FileUtil.deleteFile(webPath + temp.getImg_url());
			}
			// 上传现在的图片
			this.updateImgDataBase64(imgData, link, request);
		}

		int resultTotal = linkService.update(link, webPath);
		Result result = new Result();
		Gson gson = new Gson();
		if (resultTotal > 0) {
			result.setSuccess(true);
			result.setMsg("修改成功");
		} else {
			result.setSuccess(false);
			result.setMsg("修改失败");
		}
		ResponseUtil.write(response, gson.toJson(result));
		return null;
	}

	@RequestMapping("/list")
	public String list(@RequestParam(value = "page", required = false) String page,
			@RequestParam(value = "limit", required = false) String rows,
			@RequestParam(value = "q", required = false) String q,
			@RequestParam(value = "date1", required = false) String date1,
			@RequestParam(value = "date2", required = false) String date2,
			@RequestParam(value = "linkfenleiId", required = false) String linkfenleiId, HttpServletResponse response,
			HttpServletRequest request) throws Exception {
		PageBean pageBean = new PageBean(Integer.parseInt(page), Integer.parseInt(rows));
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("start", pageBean.getStart());
		map.put("size", pageBean.getPageSize());
		map.put("q", StringUtil.formatLike(q));
		map.put("date1", date1);
		map.put("date2", date2);
		map.put("linkfenleiId", linkfenleiId);
		List<Link> list = linkService.list(map);
		Integer total = linkService.getTotal(map);
		Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm").create();

		map.clear();
		map.put("data", list);
		map.put("count", total);
		map.put("code", 0);
		map.put("msg", "");
		ResponseUtil.write(response, gson.toJson(map));
		return null;
	}

	@RequestMapping("/delete")
	public String delete(@RequestParam(value = "ids", required = false) String ids, HttpServletResponse response,
			HttpServletRequest request) throws Exception {
		String[] idsStr = ids.split(",");
		Gson gson = new Gson();
		Result result = new Result();
		String webPath = request.getServletContext().getRealPath("/");

		for (int i = 0; i < idsStr.length; i++) {
			linkService.delete(Integer.parseInt(idsStr[i]), webPath);
		}

		result.setSuccess(true);
		ResponseUtil.write(response, gson.toJson(result));
		return null;
	}

	public void updateImgDataBase64(String imgData, Link link, HttpServletRequest request) {
		// 取得根目录带d://dxxxxx/tomcat/ruzhou/
		String webPath = request.getServletContext().getRealPath("");
		// 定义根目录下面的文件夹
		String folder = "/static/images/link/" + DateUtil.formatDate(new Date(), "yyyyMMdd") + "/";
		
		String fileName = DateUtil.formatDate(new Date(), "yyyyMMddHHmmss") + ".jpg";
		// 调用产生文件夹的方法
		FileUtil.makeDirs(webPath + folder);

		imgData = imgData.replace("data:image/png;base64,", "");
		Base64Test.GenerateImage(imgData, webPath + folder + fileName);
		link.setImg_url(folder + fileName);
	}
	
	@RequestMapping("/findById")
	public String findById(@RequestParam(value = "id", required = false) String id, HttpServletResponse response,
			HttpServletRequest request) throws Exception {
		Gson gson = new Gson();
		Link link = linkService.findById(Integer.parseInt(id));
		ResponseUtil.write(response, gson.toJson(link));
		return null;
	}

}